<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/category/[slug].tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug].tsx" />
              <option name="originalContent" value="import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;&#10;interface CategoryProps {&#10;  category: {&#10;    name: string;&#10;    id: string;&#10;    slug: string;&#10;  } | null;&#10;}&#10;&#10;const CategoryPage: React.FC&lt;CategoryProps&gt; = ({ category }) =&gt; {&#10;  if (!category) return &lt;div&gt;Category not found&lt;/div&gt;;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const getStaticPaths: GetStaticPaths = async () =&gt; {&#10;  const categories = await getAllCategories();&#10;  const paths = categories.map((cat: { slug: string }) =&gt; ({&#10;    params: { slug: cat.slug },&#10;  }));&#10;  return { paths, fallback: false };&#10;};&#10;&#10;export const getStaticProps: GetStaticProps = async ({ params }) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params?.slug) || null;&#10;  return {&#10;    props: { category },&#10;  };&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { slug: string }) =&gt; ({ slug: cat.slug }));&#10;}&#10;&#10;const CategoryPage = async ({ params }: CategoryProps) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params.slug) || null;&#10;  if (!category) return notFound();&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/category/[slug]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug]/page.tsx" />
              <option name="originalContent" value="import {getAllCategories} from '@/services/categories';&#10;import React, {Suspense} from 'react';&#10;import {notFound} from 'next/navigation';&#10;import SkeletonProductGrid from '@/components/product/SkeletonProductGrid';&#10;import ProductGrid from '@/components/product/ProductGrid';&#10;import {type CategoryItem} from '@/types/Category';&#10;import {type ProductFilter} from '@/types/product';&#10;&#10;interface CategoryParams {&#10;    slug: string;&#10;}&#10;&#10;export async function generateStaticParams() {&#10;    const categories: CategoryItem[] = await getAllCategories();&#10;    return (categories ?? []).map((cat) =&gt; ({&#10;        slug: cat.url_key,&#10;    }));&#10;}&#10;&#10;const CategoryPage = async ({params}: { params: Promise&lt;CategoryParams&gt; }) =&gt; {&#10;&#10;    const {slug} = await params;&#10;    const categories = await getAllCategories();&#10;    const category = categories.find((cat) =&gt; cat.url_key === slug) || null;&#10;&#10;    if (!category) return notFound();&#10;&#10;    const categoryFilter: ProductFilter = {&#10;        &quot;category_uid&quot;: {&quot;eq&quot;: category.uid}&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;pt-24 sm:pt-28 md:pt-32&quot;&gt;&#10;            {/* Category header */}&#10;            &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-white py-8 sm:py-12 mb-8&quot;&gt;&#10;                &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-4&quot;&gt;&#10;                        {category.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-gray-600 text-lg max-w-2xl&quot;&gt;&#10;                        Browse our collection of premium {category.name.toLowerCase()} products&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &#10;            {/* Product grid section */}&#10;            &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;                    {/* Sidebar/filters */}&#10;                    &lt;aside className=&quot;w-full lg:w-64 shrink-0&quot;&gt;&#10;                        &lt;div className=&quot;bg-white rounded-xl shadow-sm p-6 sticky top-24&quot;&gt;&#10;                            &lt;h2 className=&quot;font-medium text-lg mb-4&quot;&gt;Filters&lt;/h2&gt;&#10;                            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;h3 className=&quot;text-sm font-medium mb-2&quot;&gt;Price Range&lt;/h3&gt;&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-1&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-1&quot; className=&quot;text-sm&quot;&gt;Under $50&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-2&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-2&quot; className=&quot;text-sm&quot;&gt;$50 - $100&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-3&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-3&quot; className=&quot;text-sm&quot;&gt;$100 - $200&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-4&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-4&quot; className=&quot;text-sm&quot;&gt;Over $200&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/aside&gt;&#10;                    &#10;                    {/* Product grid */}&#10;                    &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;Suspense fallback={&lt;SkeletonProductGrid/&gt;}&gt;&#10;                            &lt;ProductGrid filter={categoryFilter} /&gt;&#10;                        &lt;/Suspense&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import {getAllCategories} from '@/services/categories';&#10;import React, {Suspense} from 'react';&#10;import {notFound} from 'next/navigation';&#10;import SkeletonProductGrid from '@/components/product/SkeletonProductGrid';&#10;import ProductGrid from '@/components/product/ProductGrid';&#10;import {type CategoryItem} from '@/types/Category';&#10;import {type ProductFilter} from '@/types/product';&#10;&#10;interface CategoryParams {&#10;    slug: string;&#10;}&#10;&#10;export async function generateStaticParams() {&#10;    const categories: CategoryItem[] = await getAllCategories();&#10;    return (categories ?? []).map((cat) =&gt; ({&#10;        slug: cat.url_key,&#10;    }));&#10;}&#10;&#10;const CategoryPage = async ({params}: { params: Promise&lt;CategoryParams&gt; }) =&gt; {&#10;    const {slug} = await params;&#10;    const categories = await getAllCategories();&#10;    const category = categories.find((cat) =&gt; cat.url_key === slug) || null;&#10;&#10;    if (!category) return notFound();&#10;&#10;    const categoryFilter: ProductFilter = {&#10;        &quot;category_uid&quot;: {&quot;eq&quot;: category.uid}&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;pt-24 sm:pt-28 md:pt-32&quot;&gt;&#10;            {/* Category header */}&#10;            &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-white py-8 sm:py-12 mb-8&quot;&gt;&#10;                &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-4&quot;&gt;&#10;                        {category.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-gray-600 text-lg max-w-2xl&quot;&gt;&#10;                        Browse our collection of premium {category.name.toLowerCase()} products&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &#10;            {/* Product grid section */}&#10;            &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;                    {/* Sidebar/filters */}&#10;                    &lt;aside className=&quot;w-full lg:w-64 shrink-0&quot;&gt;&#10;                        &lt;div className=&quot;bg-white rounded-xl shadow-sm p-6 sticky top-24&quot;&gt;&#10;                            &lt;h2 className=&quot;font-medium text-lg mb-4&quot;&gt;Filters&lt;/h2&gt;&#10;                            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;h3 className=&quot;text-sm font-medium mb-2&quot;&gt;Price Range&lt;/h3&gt;&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-1&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-1&quot; className=&quot;text-sm&quot;&gt;Under $50&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-2&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-2&quot; className=&quot;text-sm&quot;&gt;$50 - $100&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-3&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-3&quot; className=&quot;text-sm&quot;&gt;$100 - $200&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                            &lt;input type=&quot;checkbox&quot; id=&quot;price-4&quot; className=&quot;mr-2&quot; /&gt;&#10;                                            &lt;label htmlFor=&quot;price-4&quot; className=&quot;text-sm&quot;&gt;Over $200&lt;/label&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/aside&gt;&#10;                    &#10;                    {/* Product grid */}&#10;                    &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;Suspense fallback={&lt;SkeletonProductGrid/&gt;}&gt;&#10;                            &lt;ProductGrid filter={categoryFilter} /&gt;&#10;                        &lt;/Suspense&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default CategoryPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navbar.tsx" />
              <option name="originalContent" value="&#10;import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;import {getAllCategories} from &quot;@/services/categories&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-lg font-medium hover:opacity-80 transition-opacity&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.uid}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&#10;                                                asChild&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;&#10;                &lt;Input&#10;                    type=&quot;search&quot;&#10;                    placeholder=&quot;Search&quot;&#10;                    className=&quot;w-full max-w-sm bg-transparent placeholder:text-black placeholder:opacity-100 border-gray-300&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;import {getAllCategories} from &quot;@/services/categories&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-lg font-medium hover:opacity-80 transition-opacity&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.uid}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&#10;                                                asChild&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;&#10;                &lt;Input&#10;                    type=&quot;search&quot;&#10;                    placeholder=&quot;Search&quot;&#10;                    className=&quot;w-full max-w-sm bg-transparent placeholder:text-black placeholder:opacity-100 border-gray-300&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.tsx" />
              <option name="originalContent" value="import type {Metadata} from &quot;next&quot;;&#10;import {Geist, Geist_Mono} from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;import Footer from &quot;./components/Footer&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Create Next App&quot;,&#10;    description: &quot;Generated by create next app&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                             children,&#10;                                         }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    return (&#10;        &lt;html lang=&quot;en&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased min-h-dvh`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-3&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[98%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl shadow-lg&#10;            bg-blue-400/10&#10;            backdrop-blur-sm&#10;            flex&#10;            justify-between&#10;            items-center&#10;            px-25&#10;            z-50&#10;          &quot;&#10;            style={{zIndex: &quot;9999&quot;}}&#10;        &gt;&#10;            &lt;Navbar/&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;min-h-[80dvh]&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;Footer/&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import type {Metadata} from &quot;next&quot;;&#10;import {Geist, Geist_Mono} from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;import Footer from &quot;./components/Footer&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Premium Store | Modern Shopping Experience&quot;,&#10;    description: &quot;Discover our premium collection of products with a modern shopping experience&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                             children,&#10;                                         }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    return (&#10;        &lt;html lang=&quot;en&quot; className=&quot;scroll-smooth&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased min-h-dvh bg-gradient-to-b from-white to-gray-50`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-3&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[95%]&#10;            sm:w-[90%]&#10;            md:w-[92%]&#10;            lg:w-[94%]&#10;            xl:w-[96%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl shadow-lg&#10;            bg-white/70&#10;            backdrop-blur-md&#10;            flex&#10;            justify-between&#10;            items-center&#10;            px-4&#10;            sm:px-6&#10;            md:px-8&#10;            lg:px-10&#10;          &quot;&#10;            style={{zIndex: &quot;9999&quot;}}&#10;        &gt;&#10;            &lt;Navbar/&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;min-h-[80dvh]&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;Footer/&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.tsx" />
              <option name="originalContent" value="import headerImage from '../public/headerImage.jpg';&#10;&#10;export default function Page() {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;header&#10;                className=&quot;relative h-screen w-screen bg-cover bg-center z-0&quot;&#10;                style={{ backgroundImage: `url(${headerImage.src})` }}&#10;            /&gt;&#10;&#10;            {/* Content section with proper padding */}&#10;            &lt;div className=&quot;p-8 pt-25&quot;&gt;&#10;                &lt;h1&gt;Welcome to the Home Page&lt;/h1&gt;&#10;                &lt;p&gt;This is the main content of the home page.&lt;/p&gt;&#10;                &lt;p&gt;Feel free to explore the site!&lt;/p&gt;&#10;                &lt;a href=&quot;/about&quot;&gt;Go to About Page&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import headerImage from '../public/headerImage.jpg';&#10;import Link from 'next/link';&#10;import { Button } from '@/components/ui/button';&#10;import { getAllCategories } from '@/services/categories';&#10;&#10;export default async function Page() {&#10;    const categories = await getAllCategories();&#10;    const featuredCategories = categories.slice(0, 3);&#10;&#10;    return (&#10;        &lt;&gt;&#10;            {/* Hero section with overlay */}&#10;            &lt;header&#10;                className=&quot;relative h-[70vh] sm:h-[80vh] md:h-[90vh] lg:h-screen w-full bg-cover bg-center bg-fixed&quot;&#10;                style={{ backgroundImage: `url(${headerImage.src})` }}&#10;            &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black/30&quot; /&gt;&#10;                &lt;div className=&quot;absolute inset-0 flex flex-col justify-center items-center text-white px-4 sm:px-6 md:px-8 lg:px-10&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-center mb-4 md:mb-6&quot;&gt;&#10;                        Discover Premium Quality&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg sm:text-xl md:text-2xl max-w-3xl text-center mb-8&quot;&gt;&#10;                        Elevate your style with our curated collection of premium products&#10;                    &lt;/p&gt;&#10;                    &lt;Button size=&quot;lg&quot; className=&quot;text-base md:text-lg py-6 px-8 rounded-full&quot;&gt;&#10;                        Shop Now&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/header&gt;&#10;&#10;            {/* Content section with featured categories */}&#10;            &lt;section className=&quot;py-16 md:py-24 px-4 sm:px-8 md:px-12 lg:px-16 max-w-7xl mx-auto&quot;&gt;&#10;                &lt;h2 className=&quot;text-3xl md:text-4xl lg:text-5xl font-bold text-center mb-12&quot;&gt;&#10;                    Featured Collections&#10;                &lt;/h2&gt;&#10;                &#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8&quot;&gt;&#10;                    {featuredCategories.map((category) =&gt; (&#10;                        &lt;Link &#10;                            href={`/category/${category.slug}`} &#10;                            key={category.uid}&#10;                            className=&quot;group block bg-white hover:bg-gray-50 rounded-2xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden&quot;&#10;                        &gt;&#10;                            &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-medium mb-2 group-hover:text-primary transition-colors&quot;&gt;&#10;                                    {category.name}&#10;                                &lt;/h3&gt;&#10;                                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                                    Discover our selection&#10;                                &lt;/p&gt;&#10;                                &lt;span className=&quot;inline-block text-primary font-medium&quot;&gt;&#10;                                    Browse Products →&#10;                                &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/Link&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;mt-16 text-center&quot;&gt;&#10;                    &lt;Button variant=&quot;outline&quot; size=&quot;lg&quot; asChild&gt;&#10;                        &lt;Link href=&quot;/category/all&quot;&gt;View All Collections&lt;/Link&gt;&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;&#10;            {/* About section */}&#10;            &lt;section className=&quot;bg-gray-50 py-16 md:py-24 px-4 sm:px-8 md:px-12 lg:px-16&quot;&gt;&#10;                &lt;div className=&quot;max-w-5xl mx-auto&quot;&gt;&#10;                    &lt;h2 className=&quot;text-3xl md:text-4xl font-bold mb-6 text-center&quot;&gt;&#10;                        About Our Store&#10;                    &lt;/h2&gt;&#10;                    &lt;p className=&quot;text-gray-600 text-lg text-center max-w-3xl mx-auto mb-8&quot;&gt;&#10;                        We curate high-quality products with attention to detail and exceptional craftsmanship.&#10;                        Every item in our collection is carefully selected to ensure premium quality and style.&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/product/[slug]/components/ProductPageProduct.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/product/[slug]/components/ProductPageProduct.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;@/components/ui/tabs&quot;;&#10;import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from &quot;@/components/ui/tooltip&quot;;&#10;import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from &quot;@/components/ui/accordion&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { ZoomIn } from &quot;lucide-react&quot;;&#10;import Lightbox from &quot;yet-another-react-lightbox&quot;;&#10;import &quot;yet-another-react-lightbox/styles.css&quot;;&#10;import { ProductItem } from &quot;@/types/product&quot;;&#10;&#10;&#10;export default function ProductPageProduct({ product }: { product: ProductItem }) {&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const finalPrice = product.price_range.minimum_price.final_price;&#10;    const isDiscounted = finalPrice.value &lt; regularPrice.value;&#10;&#10;    const images = [&#10;        product.image,&#10;        product.thumbnail,&#10;        product.small_image,&#10;    ].filter(Boolean) as { url: string; label?: string }[];&#10;&#10;    const [selectedImage, setSelectedImage] = useState(0);&#10;    const [lightboxOpen, setLightboxOpen] = useState(false);&#10;&#10;    return (&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-10&quot;&gt;&#10;            {/* Image Gallery */}&#10;            &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;div&#10;                    className=&quot;relative aspect-square w-full overflow-hidden rounded-2xl border bg-muted group cursor-zoom-in&quot;&#10;                    onClick={() =&gt; setLightboxOpen(true)}&#10;                &gt;&#10;                    &lt;Image&#10;                        src={images[selectedImage].url}&#10;                        alt={images[selectedImage].label || product.name}&#10;                        fill&#10;                        className=&quot;object-cover transition-transform duration-300 group-hover:scale-105&quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;absolute top-3 right-3 bg-background/70 p-1 rounded-full&quot;&gt;&#10;                        &lt;ZoomIn className=&quot;w-5 h-5 text-muted-foreground&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Thumbnail carousel */}&#10;                &lt;div className=&quot;flex gap-2 overflow-x-auto pb-2&quot;&gt;&#10;                    {images.map((img, idx) =&gt; (&#10;                        &lt;div&#10;                            key={idx}&#10;                            className={cn(&#10;                                &quot;relative w-20 h-20 rounded-lg overflow-hidden border cursor-pointer&quot;,&#10;                                selectedImage === idx &amp;&amp; &quot;ring-2 ring-primary&quot;&#10;                            )}&#10;                            onClick={() =&gt; setSelectedImage(idx)}&#10;                        &gt;&#10;                            &lt;Image&#10;                                src={img.url}&#10;                                alt={img.label || product.name}&#10;                                fill&#10;                                className=&quot;object-cover&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;&#10;                {/* Lightbox */}&#10;                &lt;Lightbox&#10;                    open={lightboxOpen}&#10;                    close={() =&gt; setLightboxOpen(false)}&#10;                    slides={images.map((img) =&gt; ({ src: img.url }))}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Details */}&#10;            &lt;div className=&quot;flex flex-col gap-6&quot;&gt;&#10;                {/* Title &amp; Categories */}&#10;                &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;{product.name}&lt;/h1&gt;&#10;                    &lt;div className=&quot;flex gap-2 mt-2&quot;&gt;&#10;                        {product.categories.map((cat) =&gt; (&#10;                            &lt;Badge key={cat.uid} variant=&quot;secondary&quot;&gt;&#10;                                {cat.name}&#10;                            &lt;/Badge&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;span className=&quot;text-2xl font-bold&quot;&gt;&#10;            {finalPrice.value.toFixed(2)} {finalPrice.currency}&#10;          &lt;/span&gt;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;&gt;&#10;              &lt;span className=&quot;text-muted-foreground line-through&quot;&gt;&#10;                {regularPrice.value.toFixed(2)} {regularPrice.currency}&#10;              &lt;/span&gt;&#10;                            &lt;Badge variant=&quot;destructive&quot;&gt;Sale&lt;/Badge&gt;&#10;                        &lt;/&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Separator /&gt;&#10;&#10;                {/* Configurable Options */}&#10;                {product.configurable_options?.length ? (&#10;                    &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;                        {product.configurable_options.map((option) =&gt; (&#10;                            &lt;div key={option.attribute_code}&gt;&#10;                                &lt;p className=&quot;font-medium mb-2&quot;&gt;{option.label}&lt;/p&gt;&#10;                                &lt;div className=&quot;flex gap-2 flex-wrap&quot;&gt;&#10;                                    {option.values.map((val, idx) =&gt; {&#10;                                        const swatch = val.swatch_data;&#10;                                        const isColor = swatch?.value?.startsWith(&quot;#&quot;);&#10;&#10;                                        return swatch?.thumbnail || isColor ? (&#10;                                            &lt;TooltipProvider key={idx}&gt;&#10;                                                &lt;Tooltip&gt;&#10;                                                    &lt;TooltipTrigger asChild&gt;&#10;                                                        &lt;button&#10;                                                            className={cn(&#10;                                                                &quot;w-8 h-8 rounded-full border&quot;,&#10;                                                                &quot;hover:ring-2 hover:ring-primary&quot;&#10;                                                            )}&#10;                                                            style={{&#10;                                                                backgroundImage: swatch.thumbnail&#10;                                                                    ? `url(${swatch.thumbnail})`&#10;                                                                    : undefined,&#10;                                                                backgroundColor: isColor ? swatch.value : undefined,&#10;                                                                backgroundSize: &quot;cover&quot;,&#10;                                                            }}&#10;                                                            title={val.label}&#10;                                                        /&gt;&#10;                                                    &lt;/TooltipTrigger&gt;&#10;                                                    &lt;TooltipContent&gt;{val.label}&lt;/TooltipContent&gt;&#10;                                                &lt;/Tooltip&gt;&#10;                                            &lt;/TooltipProvider&gt;&#10;                                        ) : (&#10;                                            &lt;Badge&#10;                                                key={idx}&#10;                                                variant=&quot;outline&quot;&#10;                                                className=&quot;cursor-pointer hover:bg-primary hover:text-white&quot;&#10;                                            &gt;&#10;                                                {val.label}&#10;                                            &lt;/Badge&gt;&#10;                                        );&#10;                                    })}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                ) : null}&#10;&#10;                &lt;Separator /&gt;&#10;&#10;                {/* Add to Cart */}&#10;                &lt;Button size=&quot;lg&quot; className=&quot;w-full md:w-auto&quot;&gt;&#10;                    Add to Cart&#10;                &lt;/Button&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;Accordion type=&quot;single&quot; collapsible className=&quot;mt-6&quot;&gt;&#10;                    &lt;AccordionItem value=&quot;details&quot;&gt;&#10;                        &lt;AccordionTrigger&gt;Product Details&lt;/AccordionTrigger&gt;&#10;                        &lt;AccordionContent&gt;&#10;                            This is a premium product made with quality materials. Add actual&#10;                            Magento product description here.&#10;                        &lt;/AccordionContent&gt;&#10;                    &lt;/AccordionItem&gt;&#10;                    &lt;AccordionItem value=&quot;shipping&quot;&gt;&#10;                        &lt;AccordionTrigger&gt;Shipping &amp; Returns&lt;/AccordionTrigger&gt;&#10;                        &lt;AccordionContent&gt;&#10;                            Shipping usually takes 3-5 business days. Free returns within 30&#10;                            days.&#10;                        &lt;/AccordionContent&gt;&#10;                    &lt;/AccordionItem&gt;&#10;                &lt;/Accordion&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;@/components/ui/tabs&quot;;&#10;import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from &quot;@/components/ui/tooltip&quot;;&#10;import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from &quot;@/components/ui/accordion&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { ZoomIn } from &quot;lucide-react&quot;;&#10;import Lightbox from &quot;yet-another-react-lightbox&quot;;&#10;import &quot;yet-another-react-lightbox/styles.css&quot;;&#10;import { ProductItem } from &quot;@/types/product&quot;;&#10;&#10;&#10;export default function ProductPageProduct({ product }: { product: ProductItem }) {&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const finalPrice = product.price_range.minimum_price.final_price;&#10;    const isDiscounted = finalPrice.value &lt; regularPrice.value;&#10;&#10;    const images = [&#10;        product.image,&#10;        product.thumbnail,&#10;        product.small_image,&#10;    ].filter(Boolean) as { url: string; label?: string }[];&#10;&#10;    const [selectedImage, setSelectedImage] = useState(0);&#10;    const [lightboxOpen, setLightboxOpen] = useState(false);&#10;&#10;    return (&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-10&quot;&gt;&#10;            {/* Image Gallery */}&#10;            &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;div&#10;                    className=&quot;relative aspect-square w-full overflow-hidden rounded-2xl border bg-muted group cursor-zoom-in&quot;&#10;                    onClick={() =&gt; setLightboxOpen(true)}&#10;                &gt;&#10;                    &lt;Image&#10;                        src={images[selectedImage].url}&#10;                        alt={images[selectedImage].label || product.name}&#10;                        fill&#10;                        className=&quot;object-cover transition-transform duration-300 group-hover:scale-105&quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;absolute top-3 right-3 bg-background/70 p-1 rounded-full&quot;&gt;&#10;                        &lt;ZoomIn className=&quot;w-5 h-5 text-muted-foreground&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Thumbnail carousel */}&#10;                &lt;div className=&quot;flex gap-2 overflow-x-auto pb-2&quot;&gt;&#10;                    {images.map((img, idx) =&gt; (&#10;                        &lt;div&#10;                            key={idx}&#10;                            className={cn(&#10;                                &quot;relative w-20 h-20 rounded-lg overflow-hidden border cursor-pointer&quot;,&#10;                                selectedImage === idx &amp;&amp; &quot;ring-2 ring-primary&quot;&#10;                            )}&#10;                            onClick={() =&gt; setSelectedImage(idx)}&#10;                        &gt;&#10;                            &lt;Image&#10;                                src={img.url}&#10;                                alt={img.label || product.name}&#10;                                fill&#10;                                className=&quot;object-cover&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;&#10;                {/* Lightbox */}&#10;                &lt;Lightbox&#10;                    open={lightboxOpen}&#10;                    close={() =&gt; setLightboxOpen(false)}&#10;                    slides={images.map((img) =&gt; ({ src: img.url }))}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Details */}&#10;            &lt;div className=&quot;flex flex-col gap-6&quot;&gt;&#10;                {/* Title &amp; Categories */}&#10;                &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;{product.name}&lt;/h1&gt;&#10;                    &lt;div className=&quot;flex gap-2 mt-2&quot;&gt;&#10;                        {product.categories.map((cat) =&gt; (&#10;                            &lt;Badge key={cat.uid} variant=&quot;secondary&quot;&gt;&#10;                                {cat.name}&#10;                            &lt;/Badge&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;span className=&quot;text-2xl font-bold&quot;&gt;&#10;            {finalPrice.value.toFixed(2)} {finalPrice.currency}&#10;          &lt;/span&gt;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;&gt;&#10;              &lt;span className=&quot;text-muted-foreground line-through&quot;&gt;&#10;                {regularPrice.value.toFixed(2)} {regularPrice.currency}&#10;              &lt;/span&gt;&#10;                            &lt;Badge variant=&quot;destructive&quot;&gt;Sale&lt;/Badge&gt;&#10;                        &lt;/&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Separator /&gt;&#10;&#10;                {/* Configurable Options */}&#10;                {product.configurable_options?.length ? (&#10;                    &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;                        {product.configurable_options.map((option) =&gt; (&#10;                            &lt;div key={option.attribute_code}&gt;&#10;                                &lt;p className=&quot;font-medium mb-2&quot;&gt;{option.label}&lt;/p&gt;&#10;                                &lt;div className=&quot;flex gap-2 flex-wrap&quot;&gt;&#10;                                    {option.values.map((val, idx) =&gt; {&#10;                                        const swatch = val.swatch_data;&#10;                                        const isColor = swatch?.value?.startsWith(&quot;#&quot;);&#10;&#10;                                        return swatch?.thumbnail || isColor ? (&#10;                                            &lt;TooltipProvider key={idx}&gt;&#10;                                                &lt;Tooltip&gt;&#10;                                                    &lt;TooltipTrigger asChild&gt;&#10;                                                        &lt;button&#10;                                                            className={cn(&#10;                                                                &quot;w-8 h-8 rounded-full border&quot;,&#10;                                                                &quot;hover:ring-2 hover:ring-primary&quot;&#10;                                                            )}&#10;                                                            style={{&#10;                                                                backgroundImage: swatch.thumbnail&#10;                                                                    ? `url(${swatch.thumbnail})`&#10;                                                                    : undefined,&#10;                                                                backgroundColor: isColor ? swatch.value : undefined,&#10;                                                                backgroundSize: &quot;cover&quot;,&#10;                                                            }}&#10;                                                            title={val.label}&#10;                                                        /&gt;&#10;                                                    &lt;/TooltipTrigger&gt;&#10;                                                    &lt;TooltipContent&gt;{val.label}&lt;/TooltipContent&gt;&#10;                                                &lt;/Tooltip&gt;&#10;                                            &lt;/TooltipProvider&gt;&#10;                                        ) : (&#10;                                            &lt;Badge&#10;                                                key={idx}&#10;                                                variant=&quot;outline&quot;&#10;                                                className=&quot;cursor-pointer hover:bg-primary hover:text-white&quot;&#10;                                            &gt;&#10;                                                {val.label}&#10;                                            &lt;/Badge&gt;&#10;                                        );&#10;                                    })}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                ) : null}&#10;&#10;                &lt;Separator /&gt;&#10;&#10;                {/* Add to Cart */}&#10;                &lt;Button size=&quot;lg&quot; className=&quot;w-full md:w-auto&quot;&gt;&#10;                    Add to Cart&#10;                &lt;/Button&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;Accordion type=&quot;single&quot; collapsible className=&quot;mt-6&quot;&gt;&#10;                    &lt;AccordionItem value=&quot;details&quot;&gt;&#10;                        &lt;AccordionTrigger&gt;Product Details&lt;/AccordionTrigger&gt;&#10;                        &lt;AccordionContent&gt;&#10;                            This is a premium product made with quality materials. Add actual&#10;                            Magento product description here.&#10;                        &lt;/AccordionContent&gt;&#10;                    &lt;/AccordionItem&gt;&#10;                    &lt;AccordionItem value=&quot;shipping&quot;&gt;&#10;                        &lt;AccordionTrigger&gt;Shipping &amp; Returns&lt;/AccordionTrigger&gt;&#10;                        &lt;AccordionContent&gt;&#10;                            Shipping usually takes 3-5 business days. Free returns within 30&#10;                            days.&#10;                        &lt;/AccordionContent&gt;&#10;                    &lt;/AccordionItem&gt;&#10;                &lt;/Accordion&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/product/[slug]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/product/[slug]/page.tsx" />
              <option name="originalContent" value="export default function Page({ params }: { params: { slug: string } }) {&#10;    return (&#10;        &lt;div className=&quot;pt-25&quot;&gt;&#10;            &lt;h1&gt;Product Page&lt;/h1&gt;&#10;            &lt;p&gt;Product slug: {params.slug}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="export default function Page({ params }: { params: { slug: string } }) {&#10;    return (&#10;        &lt;div className=&quot;pt-25&quot;&gt;&#10;            &lt;h1&gt;Product Page&lt;/h1&gt;&#10;            &lt;p&gt;Product slug: {params.slug}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/ProductCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/ProductCard.tsx" />
              <option name="originalContent" value="import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;&#10;export default function ProductCard({ product }: { product: ProductItem }) {&#10;    const price = product.price_range.minimum_price.final_price;&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const isDiscounted = price.value &lt; regularPrice.value;&#10;    const swatches =&#10;        product.configurable_options?.find(&#10;            (opt) =&gt; opt.attribute_code === &quot;color&quot;&#10;        )?.values ?? [];&#10;&#10;    return (&#10;        &lt;div className=&quot;group flex flex-col w-full max-w-xs sm:max-w-sm md:max-w-md mx-auto transition-all duration-300 hover:translate-y-[-5px]&quot;&gt;&#10;            {/* Product Image with overlay */}&#10;            &lt;Link&#10;                href={`/product/${product.url_key}`}&#10;                className=&quot;block relative aspect-square rounded-xl overflow-hidden bg-gray-100&quot;&#10;            &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black/5 group-hover:bg-black/0 transition-colors z-10&quot;&gt;&lt;/div&gt;&#10;                {product.small_image?.url ? (&#10;                    &lt;Image&#10;                        src={product.small_image.url}&#10;                        alt={product.small_image.label || product.name}&#10;                        fill&#10;                        sizes=&quot;(max-width: 640px) 45vw, (max-width: 768px) 40vw, (max-width: 1024px) 30vw, 25vw&quot;&#10;                        className=&quot;object-cover object-center group-hover:scale-105 transition-transform duration-500&quot;&#10;                    /&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;w-full h-full bg-gray-200 flex items-center justify-center text-gray-400&quot;&gt;&#10;                        No Image&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Sale badge */}&#10;                {isDiscounted &amp;&amp; (&#10;                    &lt;div className=&quot;absolute top-2 right-2 bg-red-500 text-white text-xs md:text-sm font-medium px-2 py-1 rounded-md z-20&quot;&gt;&#10;                        SALE&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/Link&gt;&#10;&#10;            {/* Product info */}&#10;            &lt;div className=&quot;mt-4 px-1 md:mt-5 md:px-2&quot;&gt;&#10;                &lt;Link href={`/product/${product.url_key}`} className=&quot;block&quot;&gt;&#10;                    &lt;h3 className=&quot;text-sm md:text-base font-medium text-gray-800 hover:text-gray-900 truncate&quot;&gt;&#10;                        {product.name}&#10;                    &lt;/h3&gt;&#10;                &lt;/Link&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;mt-1.5 md:mt-2 flex items-center gap-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm md:text-base font-medium&quot;&gt;&#10;                        {price.currency} {price.value.toFixed(2)}&#10;                    &lt;/span&gt;&#10;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;span className=&quot;text-xs md:text-sm text-gray-500 line-through&quot;&gt;&#10;                            {regularPrice.value.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Swatches */}&#10;                {swatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 md:mt-4 flex gap-1.5 md:gap-2&quot;&gt;&#10;                        {swatches.slice(0, 4).map((swatch, idx) =&gt; (&#10;                            &lt;div&#10;                                key={idx}&#10;                                title={swatch.label}&#10;                                className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full border border-gray-300 overflow-hidden&quot;&#10;                                style={{&#10;                                    backgroundColor: swatch.swatch_data?.value || &quot;transparent&quot;,&#10;                                }}&#10;                            &gt;&#10;                                {swatch.swatch_data?.thumbnail &amp;&amp; (&#10;                                    &lt;Image&#10;                                        src={swatch.swatch_data.thumbnail}&#10;                                        alt={swatch.label}&#10;                                        width={24}&#10;                                        height={24}&#10;                                        className=&quot;object-cover&quot;&#10;                                    /&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {swatches.length &gt; 4 &amp;&amp; (&#10;                            &lt;div className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full bg-gray-100 flex items-center justify-center text-[10px] md:text-xs text-gray-500&quot;&gt;&#10;                                +{swatches.length - 4}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;&#10;export default function ProductCard({ product }: { product: ProductItem }) {&#10;    const price = product.price_range.minimum_price.final_price;&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const isDiscounted = price.value &lt; regularPrice.value;&#10;    const swatches =&#10;        product.configurable_options?.find(&#10;            (opt) =&gt; opt.attribute_code === &quot;color&quot;&#10;        )?.values ?? [];&#10;&#10;    return (&#10;        &lt;div className=&quot;group flex flex-col w-full max-w-xs sm:max-w-sm md:max-w-md mx-auto transition-all duration-300 hover:translate-y-[-5px]&quot;&gt;&#10;            {/* Product Image with overlay */}&#10;            &lt;Link&#10;                href={`/product/${product.url_key}`}&#10;                className=&quot;block relative aspect-square rounded-xl overflow-hidden bg-gray-100&quot;&#10;            &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black/5 group-hover:bg-black/0 transition-colors z-10&quot;&gt;&lt;/div&gt;&#10;                {product.small_image?.url ? (&#10;                    &lt;Image&#10;                        src={product.small_image.url}&#10;                        alt={product.small_image.label || product.name}&#10;                        fill&#10;                        sizes=&quot;(max-width: 640px) 45vw, (max-width: 768px) 40vw, (max-width: 1024px) 30vw, 25vw&quot;&#10;                        className=&quot;object-cover object-center group-hover:scale-105 transition-transform duration-500&quot;&#10;                    /&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;w-full h-full bg-gray-200 flex items-center justify-center text-gray-400&quot;&gt;&#10;                        No Image&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Sale badge */}&#10;                {isDiscounted &amp;&amp; (&#10;                    &lt;div className=&quot;absolute top-2 right-2 bg-red-500 text-white text-xs md:text-sm font-medium px-2 py-1 rounded-md z-20&quot;&gt;&#10;                        SALE&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/Link&gt;&#10;&#10;            {/* Product info */}&#10;            &lt;div className=&quot;mt-4 px-1 md:mt-5 md:px-2&quot;&gt;&#10;                &lt;Link&#10;                    href={`/product/${product.url_key}`}&#10;                    className=&quot;block group-hover:text-primary transition-colors&quot;&#10;                &gt;&#10;                    &lt;h3 className=&quot;text-sm md:text-base font-medium text-gray-800 leading-tight min-h-[2.5em]&quot;&gt;&#10;                        {product.name}&#10;                    &lt;/h3&gt;&#10;                &lt;/Link&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;mt-2 md:mt-3 flex items-center gap-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm md:text-base font-medium&quot;&gt;&#10;                        {price.currency} {price.value.toFixed(2)}&#10;                    &lt;/span&gt;&#10;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;span className=&quot;text-xs md:text-sm text-gray-500 line-through&quot;&gt;&#10;                            {regularPrice.value.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Swatches */}&#10;                {swatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 md:mt-4 flex gap-1.5 md:gap-2&quot;&gt;&#10;                        {swatches.slice(0, 4).map((swatch, idx) =&gt; (&#10;                            &lt;div&#10;                                key={idx}&#10;                                title={swatch.label}&#10;                                className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full border border-gray-300 overflow-hidden&quot;&#10;                                style={{&#10;                                    backgroundColor: swatch.swatch_data?.value || &quot;transparent&quot;,&#10;                                }}&#10;                            &gt;&#10;                                {swatch.swatch_data?.thumbnail &amp;&amp; (&#10;                                    &lt;Image&#10;                                        src={swatch.swatch_data.thumbnail}&#10;                                        alt={swatch.label}&#10;                                        width={24}&#10;                                        height={24}&#10;                                        className=&quot;object-cover&quot;&#10;                                    /&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {swatches.length &gt; 4 &amp;&amp; (&#10;                            &lt;div className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full bg-gray-100 flex items-center justify-center text-[10px] md:text-xs text-gray-500&quot;&gt;&#10;                                +{swatches.length - 4}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/ProductGrid.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/ProductGrid.tsx" />
              <option name="originalContent" value="import ProductCard from &quot;@/components/product/ProductCard&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;import { getFilteredProducts } from &quot;@/services/products&quot;;&#10;import { type ProductFilter } from &quot;@/types/product&quot;;&#10;&#10;type ProductGridProps = {&#10;    filter: ProductFilter;&#10;}&#10;&#10;export default async function ProductGrid({ filter }: ProductGridProps) {&#10;    const products: ProductItem[] = await getFilteredProducts(filter);&#10;&#10;    return products.length &gt; 0 ? (&#10;        &lt;div&#10;            className=&quot;&#10;                grid&#10;                grid-cols-1&#10;                sm:grid-cols-2&#10;                md:grid-cols-2&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-6&#10;                gap-y-10&#10;            &quot;&#10;        &gt;&#10;            {products.map((product) =&gt; (&#10;                &lt;ProductCard key={product.uid} product={product} /&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    ) : (&#10;        &lt;div className=&quot;py-16 text-center text-gray-500 border border-dashed border-gray-200 rounded-lg flex flex-col items-center justify-center&quot;&gt;&#10;            &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; className=&quot;h-12 w-12 text-gray-400 mb-4&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke=&quot;currentColor&quot;&gt;&#10;                &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={1.5} d=&quot;M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z&quot; /&gt;&#10;            &lt;/svg&gt;&#10;            &lt;p className=&quot;text-lg font-medium mb-2&quot;&gt;No products found&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;Try adjusting your filters or check back later for new arrivals.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import ProductCard from &quot;@/components/product/ProductCard&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;import { getFilteredProducts } from &quot;@/services/products&quot;;&#10;import { type ProductFilter } from &quot;@/types/product&quot;;&#10;&#10;type ProductGridProps = {&#10;    filter: ProductFilter;&#10;}&#10;&#10;export default async function ProductGrid({ filter }: ProductGridProps) {&#10;    const products: ProductItem[] = await getFilteredProducts(filter);&#10;&#10;    return products.length &gt; 0 ? (&#10;        &lt;div&#10;            className=&quot;&#10;                grid&#10;                grid-cols-2&#10;                sm:grid-cols-2&#10;                md:grid-cols-3&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-4&#10;                sm:gap-x-6&#10;                md:gap-x-8&#10;                gap-y-10&#10;                sm:gap-y-12&#10;                md:gap-y-16&#10;            &quot;&#10;        &gt;&#10;            {products.map((product) =&gt; (&#10;                &lt;ProductCard key={product.uid} product={product} /&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    ) : (&#10;        &lt;div className=&quot;py-16 text-center text-gray-500 border border-dashed border-gray-200 rounded-lg flex flex-col items-center justify-center&quot;&gt;&#10;            &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; className=&quot;h-12 w-12 text-gray-400 mb-4&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke=&quot;currentColor&quot;&gt;&#10;                &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={1.5} d=&quot;M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z&quot; /&gt;&#10;            &lt;/svg&gt;&#10;            &lt;p className=&quot;text-lg font-medium mb-2&quot;&gt;No products found&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;Try adjusting your filters or check back later for new arrivals.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/SkeletonProduct.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/SkeletonProduct.tsx" />
              <option name="originalContent" value="import { Skeleton } from &quot;@/components/ui/skeleton&quot;&#10;&#10;export default function SkeletonProduct() {&#10;    return (&#10;        &lt;div className=&quot;animate-pulse flex flex-col&quot;&gt;&#10;            {/* Image placeholder */}&#10;            &lt;Skeleton className=&quot;w-[240px] h-[300px] rounded-lg&quot; /&gt;&#10;&#10;            {/* Product name */}&#10;            &lt;Skeleton className=&quot;mt-2 h-4 w-3/4 rounded&quot; /&gt;&#10;&#10;            {/* Price placeholder */}&#10;            &lt;Skeleton className=&quot;mt-1 h-4 w-1/2 rounded&quot; /&gt;&#10;&#10;            {/* Swatches row */}&#10;            &lt;div className=&quot;mt-3 flex space-x-2&quot;&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* CTA button */}&#10;            &lt;Skeleton className=&quot;mt-4 h-8 w-full rounded&quot; /&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import { Skeleton } from &quot;@/components/ui/skeleton&quot;&#10;&#10;export default function SkeletonProduct() {&#10;    return (&#10;        &lt;div className=&quot;animate-pulse flex flex-col w-full max-w-xs mx-auto&quot;&gt;&#10;            {/* Image placeholder */}&#10;            &lt;Skeleton className=&quot;aspect-square w-full rounded-xl&quot; /&gt;&#10;&#10;            {/* Product name */}&#10;            &lt;Skeleton className=&quot;mt-4 h-5 w-3/4 rounded&quot; /&gt;&#10;&#10;            {/* Price placeholder */}&#10;            &lt;Skeleton className=&quot;mt-2 h-4 w-1/3 rounded&quot; /&gt;&#10;&#10;            {/* Swatches row */}&#10;            &lt;div className=&quot;mt-3 flex gap-1.5&quot;&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/SkeletonProductGrid.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/SkeletonProductGrid.tsx" />
              <option name="originalContent" value="import SkeletonProduct from './SkeletonProduct'&#10;&#10;export default function SkeletonProductGrid() {&#10;    return (&#10;        &lt;div className=&quot;&#10;                grid&#10;                grid-cols-1&#10;                sm:grid-cols-2&#10;                md:grid-cols-2&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-6&#10;                gap-y-10&#10;        &quot;&gt;&#10;            {Array.from({length: 25}).map((_, index) =&gt; (&#10;                &lt;SkeletonProduct key={index}/&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import SkeletonProduct from './SkeletonProduct'&#10;&#10;export default function SkeletonProductGrid() {&#10;    return (&#10;        &lt;div className=&quot;&#10;                grid&#10;                grid-cols-2&#10;                sm:grid-cols-2&#10;                md:grid-cols-3&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-4&#10;                sm:gap-x-6&#10;                md:gap-x-8&#10;                gap-y-10&#10;                sm:gap-y-12&#10;                md:gap-y-16&#10;        &quot;&gt;&#10;            {Array.from({length: 8}).map((_, index) =&gt; (&#10;                &lt;SkeletonProduct key={index}/&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/services/categories.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/services/categories.ts" />
              <option name="originalContent" value="// @ts-expect-error import { GraphQLError } from &quot;graphql&quot;;&#10;import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;&#10;import { type CategoryItem } from &quot;@/types/Category&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: CategoryItem[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;&#10;const getAllCategories = async (): Promise&lt;CategoryItem[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({ query: queryString }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        const items = data?.categories?.items ?? [];&#10;        return items.flatMap((item) =&gt;&#10;            (item.children ?? []).map((child) =&gt; ({&#10;                name: child.name,&#10;                uid: child.uid,&#10;                slug: child.url_key || child.name.toLowerCase().replace(/\s+/g, '-'),&#10;                url_key: child.url_key&#10;            }))&#10;        );&#10;    }&#10;    catch (error) {&#10;        console.error(&quot;Error fetching categories:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export { getAllCategories };" />
              <option name="updatedContent" value="// @ts-expect-error import { GraphQLError } from &quot;graphql&quot;;&#10;import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;&#10;import { type CategoryItem } from &quot;@/types/Category&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;&#10;type CategoryTreeItem = {&#10;    uid: string;&#10;    name: string;&#10;    url_key: string;&#10;    level: number;&#10;    path: string;&#10;    children?: CategoryTreeItem[];&#10;};&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: CategoryTreeItem[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;// Helper function to transform GraphQL category data to our CategoryItem format&#10;const mapCategoryData = (category: CategoryTreeItem): CategoryItem =&gt; {&#10;    return {&#10;        name: category.name,&#10;        uid: category.uid,&#10;        url_key: category.url_key,&#10;        path: category.path || '',&#10;        level: category.level || 0,&#10;        children: category.children ? category.children.map(mapCategoryData) : []&#10;    };&#10;};&#10;&#10;const getAllCategories = async (): Promise&lt;CategoryItem[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({ query: queryString }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        const items = data?.categories?.items ?? [];&#10;        return items.flatMap((item) =&gt;&#10;            (item.children ?? []).map(mapCategoryData)&#10;        );&#10;    }&#10;    catch (error) {&#10;        console.error(&quot;Error fetching categories:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export { getAllCategories };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/services/products.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/services/products.ts" />
              <option name="originalContent" value="import GET_FILTERED_PRODUCTS_QUERY from &quot;@/graphql/queries/products/get_filtered_products.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;;&#10;import { ProductItem } from &quot;@/types/product&quot;;&#10;import { print } from &quot;graphql&quot;;&#10;import { type ProductFilter } from &quot;@/types/product&quot;;&#10;import GET_PRODUCTS_BY_CATEGORY_QUERY from &quot;@/graphql/queries/products/get_products_by_category.graphql&quot;;&#10;&#10;interface ProductsResponse {&#10;    products: {&#10;        total_count: number;&#10;        items: ProductItem[];&#10;    };&#10;}&#10;&#10;/**&#10; * Fetch products by category UID&#10; */&#10;const getProductsByCategory = async (category_uid: string): Promise&lt;ProductItem[]&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_PRODUCTS_BY_CATEGORY_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { cat: category_uid },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching products:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        return data?.products?.items ?? [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching products:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;/**&#10; * Fetch products by arbitrary Magento filters&#10; */&#10;const getFilteredProducts = async (filters: ProductFilter): Promise&lt;ProductItem[]&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_FILTERED_PRODUCTS_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { filter: filters },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching filtered products:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        return data?.products?.items ?? [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching filtered products:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;const getProductByUrlKey = async (url_key: string): Promise&lt;ProductItem | null&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_FILTERED_PRODUCTS_QUERY);&#10;&#10;    const filter: ProductFilter = {&#10;        &quot;url_key&quot;:  { eq: url_key }&#10;    }&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { filter: filter },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching product:&quot;, res.statusText , &quot;   &quot; ,url_key);&#10;            return null;&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return null;&#10;        }&#10;&#10;        return data?.products?.items[0] ?? null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching filtered products:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export { getProductsByCategory, getFilteredProducts, getProductByUrlKey};&#10;" />
              <option name="updatedContent" value="import GET_FILTERED_PRODUCTS_QUERY from &quot;@/graphql/queries/products/get_filtered_products.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;;&#10;import { ProductItem } from &quot;@/types/product&quot;;&#10;import { print } from &quot;graphql&quot;;&#10;import { type ProductFilter } from &quot;@/types/product&quot;;&#10;import GET_PRODUCTS_BY_CATEGORY_QUERY from &quot;@/graphql/queries/products/get_products_by_category.graphql&quot;;&#10;&#10;interface ProductsResponse {&#10;    products: {&#10;        total_count: number;&#10;        items: ProductItem[];&#10;    };&#10;}&#10;&#10;/**&#10; * Fetch products by category UID&#10; */&#10;const getProductsByCategory = async (category_uid: string): Promise&lt;ProductItem[]&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_PRODUCTS_BY_CATEGORY_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { cat: category_uid },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching products:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        return data?.products?.items ?? [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching products:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;/**&#10; * Fetch products by arbitrary Magento filters&#10; */&#10;const getFilteredProducts = async (filters: ProductFilter): Promise&lt;ProductItem[]&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_FILTERED_PRODUCTS_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { filter: filters },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching filtered products:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        return data?.products?.items ?? [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching filtered products:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;const getProductByUrlKey = async (url_key: string): Promise&lt;ProductItem | null&gt; =&gt; {&#10;    &quot;use cache&quot;;&#10;    const queryString = print(GET_FILTERED_PRODUCTS_QUERY);&#10;&#10;    const filter: ProductFilter = {&#10;        &quot;url_key&quot;:  { eq: url_key }&#10;    }&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({&#10;                query: queryString,&#10;                variables: { filter: filter },&#10;            }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching product:&quot;, res.statusText , &quot;   &quot; ,url_key);&#10;            return null;&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;ProductsResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return null;&#10;        }&#10;&#10;        return data?.products?.items[0] ?? null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching filtered products:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export { getProductsByCategory, getFilteredProducts, getProductByUrlKey};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/graphql.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/graphql.d.ts" />
              <option name="updatedContent" value="declare module '*.graphql' {&#10;  import { DocumentNode } from 'graphql';&#10;  const Schema: DocumentNode;&#10;  export default Schema;&#10;}&#10;&#10;declare module '*.gql' {&#10;  import { DocumentNode } from 'graphql';&#10;  const Schema: DocumentNode;&#10;  export default Schema;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>