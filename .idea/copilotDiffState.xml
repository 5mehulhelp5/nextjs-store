<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/category/[slug].tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug].tsx" />
              <option name="originalContent" value="import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;&#10;interface CategoryProps {&#10;  category: {&#10;    name: string;&#10;    id: string;&#10;    slug: string;&#10;  } | null;&#10;}&#10;&#10;const CategoryPage: React.FC&lt;CategoryProps&gt; = ({ category }) =&gt; {&#10;  if (!category) return &lt;div&gt;Category not found&lt;/div&gt;;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const getStaticPaths: GetStaticPaths = async () =&gt; {&#10;  const categories = await getAllCategories();&#10;  const paths = categories.map((cat: { slug: string }) =&gt; ({&#10;    params: { slug: cat.slug },&#10;  }));&#10;  return { paths, fallback: false };&#10;};&#10;&#10;export const getStaticProps: GetStaticProps = async ({ params }) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params?.slug) || null;&#10;  return {&#10;    props: { category },&#10;  };&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { slug: string }) =&gt; ({ slug: cat.slug }));&#10;}&#10;&#10;const CategoryPage = async ({ params }: CategoryProps) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params.slug) || null;&#10;  if (!category) return notFound();&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/category/[slug]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug]/page.tsx" />
              <option name="originalContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;import ProductGrid from '@/components/product/SkeletonProductGrid';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { url_key: string }) =&gt; ({ slug: cat.url_key }));&#10;}&#10;&#10;const CategoryPage = async ({ params }: CategoryProps) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { url_key: string }) =&gt; cat.url_key === params.slug) || null;&#10;  if (!category) return notFound();&#10;  return (&#10;    &lt;div className={`mt-50 mx-auto w-2/3 px-4`}&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.url_key}&lt;/p&gt;&#10;        &lt;ProductGrid /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;&#10;&#10;" />
              <option name="updatedContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;import ProductGrid from '@/components/product/SkeletonProductGrid';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { url_key: string }) =&gt; ({ slug: cat.url_key }));&#10;}&#10;&#10;export default async function CategoryPage({ params }: CategoryProps) {&#10;  // Ensure params is fully resolved before accessing its properties&#10;  const slug = params?.slug;&#10;&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { url_key: string }) =&gt; cat.url_key === slug) || null;&#10;&#10;  if (!category) return notFound();&#10;&#10;  return (&#10;    &lt;div className={`mt-50 mx-auto w-2/3 px-4`}&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.url_key}&lt;/p&gt;&#10;      &lt;ProductGrid /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navbar.tsx" />
              <option name="originalContent" value="import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;&#10;type NavbarProps = {&#10;    categories: Array&lt;{&#10;        name: string;&#10;        id: string;&#10;        url_key: string;&#10;    }&gt;;&#10;};&#10;&#10;export default function Navbar({ categories }: NavbarProps) {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.id}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;&#10;                search&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { getAllCategories } from &quot;@/services/categories&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;    console.table(categories);&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.id}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;search&lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.tsx" />
              <option name="originalContent" value="import type { Metadata } from &quot;next&quot;;&#10;import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;import { getAllCategories } from &quot;@/services/categories&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Create Next App&quot;,&#10;    description: &quot;Generated by create next app&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                       children,&#10;                                   }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    // Fetch categories in the server component&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;html lang=&quot;en&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased relative`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-1&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[98%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl&#10;            bg-blue-400/10&#10;            backdrop-blur-xl&#10;            z-50&#10;            flex&#10;            justify-between&#10;            items-center&#10;            px-6&#10;            shadow-lg&#10;          &quot;&#10;            style={{ isolation: 'isolate' }}&#10;        &gt;&#10;            {/* Pass the categories to the client component */}&#10;            &lt;Navbar categories={categories} /&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;relative pt-20 z-0&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import type { Metadata } from &quot;next&quot;;&#10;import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Create Next App&quot;,&#10;    description: &quot;Generated by create next app&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                       children,&#10;                                   }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    return (&#10;        &lt;html lang=&quot;en&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-1&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[98%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl&#10;            bg-blue-400/10&#10;            backdrop-blur-[100%]&#10;            z-[100]&#10;            flex&#10;            justify-between&#10;            items-center&#10;            ps-25&#10;            pe-25&#10;          &quot;&#10;        &gt;&#10;            &lt;Navbar /&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;pt-20 z-0&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/graphql/queries/categories/get_all_categories.graphql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/graphql/queries/categories/get_all_categories.graphql" />
              <option name="originalContent" value="query {&#10;    categories {&#10;        items {&#10;            children {&#10;                id: uid&#10;                name&#10;                url_key&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="query {&#10;    categories {&#10;        items {&#10;            children {&#10;                uid&#10;                name&#10;                url_key&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/services/categories.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/services/categories.ts" />
              <option name="originalContent" value="// @ts-expect-error import { GraphQLError } from &quot;graphql&quot;;&#10;import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import {GraphQLResponse} from &quot;../lib/apollo/client&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;type Category = {&#10;    name: string;&#10;    id: string;&#10;    url_key: string;&#10;};&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: Category[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;&#10;const getAllCategories = async (): Promise&lt;Category[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;    const GRAPHQL_ENDPOINT = process.env.NEXT_PUBLIC_MAGENTO_GRAPHQL_ENDPOINT || 'http://magento.local/graphql';&#10;&#10;    console.log(`Fetching categories from: ${GRAPHQL_ENDPOINT} with query:`, GET_CATEGORIES_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(GRAPHQL_ENDPOINT, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({ query: queryString }),&#10;            // Adding these options to help with Next.js fetch&#10;            cache: 'no-store',&#10;            next: { revalidate: 60 } // Revalidate every 60 seconds&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        const items = data?.categories?.items ?? [];&#10;        return items.flatMap((item) =&gt;&#10;            (item.children ?? []).map((child) =&gt; ({&#10;                name: child.name,&#10;                id: child.id || child.name,&#10;                slug: child.url_key || child.name.toLowerCase().replace(/\s+/g, '-'),&#10;                url_key: child.url_key&#10;            }))&#10;        );&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching categories:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export { getAllCategories };" />
              <option name="updatedContent" value="// @ts-expect-error import { GraphQLError } from &quot;graphql&quot;;&#10;import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import {GraphQLResponse} from &quot;../lib/apollo/client&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;type Category = {&#10;    name: string;&#10;    id: string;&#10;    url_key: string;&#10;};&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: Category[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;&#10;const getAllCategories = async (): Promise&lt;Category[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;&#10;    const res = await fetch(process.env.NEXT_PUBLIC_MAGENTO_GRAPHQL_ENDPOINT, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ query: queryString }),&#10;    });&#10;&#10;&#10;    if (!res.ok) {&#10;        console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;        return [];&#10;    }&#10;&#10;    const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;    if (errors) {&#10;        console.error(&quot;GraphQL errors:&quot;, errors);&#10;        return [];&#10;    }&#10;&#10;    const items = data?.categories?.items ?? [];&#10;    return items.flatMap((item) =&gt;&#10;        (item.children ?? []).map((child) =&gt; ({&#10;            name: child.name,&#10;            id: child.id || child.name,&#10;            slug: child.url_key || child.name.toLowerCase().replace(/\s+/g, '-'),&#10;            url_key: child.url_key&#10;        }))&#10;    );&#10;};&#10;&#10;export { getAllCategories };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>