<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/category/[slug].tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug].tsx" />
              <option name="originalContent" value="import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;&#10;interface CategoryProps {&#10;  category: {&#10;    name: string;&#10;    id: string;&#10;    slug: string;&#10;  } | null;&#10;}&#10;&#10;const CategoryPage: React.FC&lt;CategoryProps&gt; = ({ category }) =&gt; {&#10;  if (!category) return &lt;div&gt;Category not found&lt;/div&gt;;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const getStaticPaths: GetStaticPaths = async () =&gt; {&#10;  const categories = await getAllCategories();&#10;  const paths = categories.map((cat: { slug: string }) =&gt; ({&#10;    params: { slug: cat.slug },&#10;  }));&#10;  return { paths, fallback: false };&#10;};&#10;&#10;export const getStaticProps: GetStaticProps = async ({ params }) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params?.slug) || null;&#10;  return {&#10;    props: { category },&#10;  };&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { slug: string }) =&gt; ({ slug: cat.slug }));&#10;}&#10;&#10;const CategoryPage = async ({ params }: CategoryProps) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params.slug) || null;&#10;  if (!category) return notFound();&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/components/ClientMegaMenu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/ClientMegaMenu.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import Image from &quot;next/image&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuContent,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList,&#10;    NavigationMenuTrigger&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import React from &quot;react&quot;;&#10;export default function  ClientSideMegaMenu ({ categories }: { categories: any[] }) {&#10;    const pathname = usePathname();&#10;    const [activeCategory, setActiveCategory] = React.useState&lt;any&gt;(null);&#10;&#10;    return (&#10;        &lt;NavigationMenu&gt;&#10;            &lt;NavigationMenuList&gt;&#10;                {categories.map((category) =&gt; (&#10;                    &lt;NavigationMenuItem key={category.uid}&gt;&#10;                        &lt;NavigationMenuTrigger&#10;                            className={cn(&#10;                                &quot;text-sm font-medium&quot;,&#10;                                pathname?.includes(`/category/${category.url_key}`)&#10;                                    ? &quot;text-primary&quot;&#10;                                    : &quot;text-gray-700&quot;&#10;                            )}&#10;                            onMouseEnter={() =&gt; setActiveCategory(category)}&#10;                        &gt;&#10;                            {category.name}&#10;                        &lt;/NavigationMenuTrigger&gt;&#10;                        &lt;NavigationMenuContent className=&quot;w-[800px] lg:w-[950px]&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-12 gap-4 p-4&quot;&gt;&#10;                                &lt;div className=&quot;col-span-5 overflow-y-auto max-h-[400px] pr-4 border-r&quot;&gt;&#10;                                    &lt;h3 className=&quot;font-medium mb-2 text-gray-900&quot;&gt;{category.name} Categories&lt;/h3&gt;&#10;                                    {category.children &amp;&amp; category.children.length &gt; 0 ? (&#10;                                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                            {category.children.map((child: any) =&gt; (&#10;                                                &lt;CategoryMenuItem&#10;                                                    key={child.uid}&#10;                                                    category={child}&#10;                                                    activePath={pathname}&#10;                                                /&gt;&#10;                                            ))}&#10;                                        &lt;/div&gt;&#10;                                    ) : (&#10;                                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;No subcategories available&lt;/p&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;col-span-7&quot;&gt;&#10;                                    &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;                                        {/* Category Banner */}&#10;                                        &lt;div className=&quot;mb-4 relative h-[200px] overflow-hidden rounded-lg&quot;&gt;&#10;                                            {category.image ? (&#10;                                                &lt;Image&#10;                                                    src={category.image}&#10;                                                    alt={category.name}&#10;                                                    fill&#10;                                                    className=&quot;object-cover&quot;&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;div className=&quot;w-full h-full bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center&quot;&gt;&#10;                                                    &lt;span className=&quot;text-gray-500&quot;&gt;{category.name}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Category Description */}&#10;                                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-lg font-medium mb-2&quot;&gt;{category.name}&lt;/h3&gt;&#10;                                            {category.description ? (&#10;                                                &lt;div&#10;                                                    className=&quot;text-sm text-gray-600 prose prose-sm max-w-none&quot;&#10;                                                    dangerouslySetInnerHTML={{ __html: category.description }}&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                                    Explore our selection of {category.name.toLowerCase()} products.&#10;                                                &lt;/p&gt;&#10;                                            )}&#10;                                            &lt;Link&#10;                                                href={`/category/${category.url_key}`}&#10;                                                className=&quot;inline-block mt-4 text-sm font-medium text-primary hover:underline&quot;&#10;                                            &gt;&#10;                                                View All {category.name} Products&#10;                                            &lt;/Link&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/NavigationMenuContent&gt;&#10;                    &lt;/NavigationMenuItem&gt;&#10;                ))}&#10;            &lt;/NavigationMenuList&gt;&#10;        &lt;/NavigationMenu&gt;&#10;    );&#10;};" />
              <option name="updatedContent" value="'use client'&#10;&#10;import Image from &quot;next/image&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuContent,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList,&#10;    NavigationMenuTrigger&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import React from &quot;react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ClientSideMegaMenu ({ categories }: { categories: any[] }) {&#10;    const pathname = usePathname();&#10;    const [activeCategory, setActiveCategory] = React.useState&lt;any&gt;(null);&#10;&#10;    return (&#10;        &lt;NavigationMenu&gt;&#10;            &lt;NavigationMenuList&gt;&#10;                {categories.map((category) =&gt; (&#10;                    &lt;NavigationMenuItem key={category.uid}&gt;&#10;                        &lt;NavigationMenuTrigger&#10;                            className={cn(&#10;                                &quot;text-sm font-medium&quot;,&#10;                                pathname?.includes(`/category/${category.url_key}`)&#10;                                    ? &quot;text-primary&quot;&#10;                                    : &quot;text-gray-700&quot;&#10;                            )}&#10;                            onMouseEnter={() =&gt; setActiveCategory(category)}&#10;                        &gt;&#10;                            {category.name}&#10;                        &lt;/NavigationMenuTrigger&gt;&#10;                        &lt;NavigationMenuContent className=&quot;w-[800px] lg:w-[950px]&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-12 gap-4 p-4&quot;&gt;&#10;                                &lt;div className=&quot;col-span-5 overflow-y-auto max-h-[400px] pr-4 border-r&quot;&gt;&#10;                                    &lt;h3 className=&quot;font-medium mb-2 text-gray-900&quot;&gt;{category.name} Categories&lt;/h3&gt;&#10;                                    {category.children &amp;&amp; category.children.length &gt; 0 ? (&#10;                                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                            {category.children.map((child: any) =&gt; (&#10;                                                &lt;CategoryMenuItem&#10;                                                    key={child.uid}&#10;                                                    category={child}&#10;                                                    activePath={pathname}&#10;                                                /&gt;&#10;                                            ))}&#10;                                        &lt;/div&gt;&#10;                                    ) : (&#10;                                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;No subcategories available&lt;/p&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;col-span-7&quot;&gt;&#10;                                    &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;                                        {/* Category Banner */}&#10;                                        &lt;div className=&quot;mb-4 relative h-[200px] overflow-hidden rounded-lg&quot;&gt;&#10;                                            {category.image ? (&#10;                                                &lt;Image&#10;                                                    src={category.image}&#10;                                                    alt={category.name}&#10;                                                    fill&#10;                                                    className=&quot;object-cover&quot;&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;div className=&quot;w-full h-full bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center&quot;&gt;&#10;                                                    &lt;span className=&quot;text-gray-500&quot;&gt;{category.name}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Category Description */}&#10;                                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-lg font-medium mb-2&quot;&gt;{category.name}&lt;/h3&gt;&#10;                                            {category.description ? (&#10;                                                &lt;div&#10;                                                    className=&quot;text-sm text-gray-600 prose prose-sm max-w-none&quot;&#10;                                                    dangerouslySetInnerHTML={{ __html: category.description }}&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                                    Explore our selection of {category.name.toLowerCase()} products.&#10;                                                &lt;/p&gt;&#10;                                            )}&#10;                                            &lt;Link&#10;                                                href={`/category/${category.url_key}`}&#10;                                                className=&quot;inline-block mt-4 text-sm font-medium text-primary hover:underline&quot;&#10;                                            &gt;&#10;                                                View All {category.name} Products&#10;                                            &lt;/Link&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/NavigationMenuContent&gt;&#10;                    &lt;/NavigationMenuItem&gt;&#10;                ))}&#10;            &lt;/NavigationMenuList&gt;&#10;        &lt;/NavigationMenu&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navbar.tsx" />
              <option name="originalContent" value="import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuContent,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList,&#10;    NavigationMenuTrigger&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;&#10;import {getAllCategories} from &quot;@/services/categories&quot;;&#10;import MiniCart from &quot;@/components/minicart/Minicart&quot;;&#10;import * as React from &quot;react&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-lg font-medium hover:opacity-80 transition-opacity&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu viewport={false}&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.uid}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&#10;                                                asChild&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                    &lt;NavigationMenuItem&gt;&#10;                        &lt;NavigationMenuTrigger&gt;Home&lt;/NavigationMenuTrigger&gt;&#10;                        &lt;NavigationMenuContent&gt;&#10;                            &lt;ul className=&quot;grid gap-2 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]&quot;&gt;&#10;                                &lt;li className=&quot;row-span-3&quot;&gt;&#10;                                    &lt;NavigationMenuLink asChild&gt;&#10;                                        &lt;Link&#10;                                            className=&quot;from-muted/50 to-muted flex h-full w-full flex-col justify-end rounded-md bg-linear-to-b p-6 no-underline outline-hidden select-none focus:shadow-md&quot;&#10;                                            href=&quot;/&quot;&#10;                                        &gt;&#10;                                            &lt;div className=&quot;mt-4 mb-2 text-lg font-medium&quot;&gt;&#10;                                                shadcn/ui&#10;                                            &lt;/div&gt;&#10;                                            &lt;p className=&quot;text-muted-foreground text-sm leading-tight&quot;&gt;&#10;                                                Beautifully designed components built with Tailwind CSS.&#10;                                            &lt;/p&gt;&#10;                                        &lt;/Link&gt;&#10;                                    &lt;/NavigationMenuLink&gt;&#10;                                &lt;/li&gt;&#10;                                &lt;ListItem href=&quot;/docs&quot; title=&quot;Introduction&quot;&gt;&#10;                                    Re-usable components built using Radix UI and Tailwind CSS.&#10;                                &lt;/ListItem&gt;&#10;                                &lt;ListItem href=&quot;/docs/installation&quot; title=&quot;Installation&quot;&gt;&#10;                                    How to install dependencies and structure your app.&#10;                                &lt;/ListItem&gt;&#10;                                &lt;ListItem href=&quot;/docs/primitives/typography&quot; title=&quot;Typography&quot;&gt;&#10;                                    Styles for headings, paragraphs, lists...etc&#10;                                &lt;/ListItem&gt;&#10;                            &lt;/ul&gt;&#10;                        &lt;/NavigationMenuContent&gt;&#10;                    &lt;/NavigationMenuItem&gt;&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div className=&quot;flex flex-row items-center gap-6&quot;&gt;&#10;                &lt;MiniCart/&gt;&#10;                &lt;Input&#10;                    type=&quot;search&quot;&#10;                    placeholder=&quot;Search&quot;&#10;                    className=&quot;w-full max-w-sm bg-transparent placeholder:text-black placeholder:opacity-100 border-gray-300&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;&#10;function ListItem({&#10;                      title,&#10;                      children,&#10;                      href,&#10;                      ...props&#10;                  }: React.ComponentPropsWithoutRef&lt;&quot;li&quot;&gt; &amp; { href: string }) {&#10;    return (&#10;        &lt;li {...props}&gt;&#10;            &lt;NavigationMenuLink asChild&gt;&#10;                &lt;Link href={href}&gt;&#10;                    &lt;div className=&quot;text-sm leading-none font-medium&quot;&gt;{title}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-muted-foreground line-clamp-2 text-sm leading-snug&quot;&gt;&#10;                        {children}&#10;                    &lt;/p&gt;&#10;                &lt;/Link&gt;&#10;            &lt;/NavigationMenuLink&gt;&#10;        &lt;/li&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuContent,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList,&#10;    NavigationMenuTrigger&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { getAllCategories } from &quot;@/services/categories&quot;;&#10;import MiniCart from &quot;@/components/minicart/Minicart&quot;;&#10;import * as React from &quot;react&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;// Helper component for category menu items&#10;const CategoryMenuItem = ({ &#10;    category, &#10;    level = 0, &#10;    activePath &#10;}: { &#10;    category: any, &#10;    level?: number, &#10;    activePath?: string &#10;}) =&gt; {&#10;    const isActive = activePath?.includes(`/category/${category.url_key}`);&#10;    const indentClass = level &gt; 0 ? `pl-${level * 2}` : '';&#10;&#10;    return (&#10;        &lt;div key={category.uid} className={`mb-1 ${indentClass}`}&gt;&#10;            &lt;Link &#10;                href={`/category/${category.url_key}`}&#10;                className={cn(&#10;                    &quot;text-sm font-medium hover:text-primary transition-colors&quot;,&#10;                    isActive ? &quot;text-primary font-semibold&quot; : &quot;text-gray-700&quot;&#10;                )}&#10;            &gt;&#10;                {category.name}&#10;            &lt;/Link&gt;&#10;            {category.children &amp;&amp; category.children.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;pl-4 mt-1 border-l border-gray-200&quot;&gt;&#10;                    {category.children.map((child: any) =&gt; (&#10;                        &lt;CategoryMenuItem &#10;                            key={child.uid} &#10;                            category={child} &#10;                            level={level + 1}&#10;                            activePath={activePath}&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Client component wrapper for interactive elements&#10;&quot;use client&quot;;&#10;&#10;const ClientSideMegaMenu = ({ categories }: { categories: any[] }) =&gt; {&#10;    const pathname = usePathname();&#10;    const [activeCategory, setActiveCategory] = React.useState&lt;any&gt;(null);&#10;&#10;    return (&#10;        &lt;NavigationMenu&gt;&#10;            &lt;NavigationMenuList&gt;&#10;                {categories.map((category) =&gt; (&#10;                    &lt;NavigationMenuItem key={category.uid}&gt;&#10;                        &lt;NavigationMenuTrigger &#10;                            className={cn(&#10;                                &quot;text-sm font-medium&quot;,&#10;                                pathname?.includes(`/category/${category.url_key}`) &#10;                                    ? &quot;text-primary&quot; &#10;                                    : &quot;text-gray-700&quot;&#10;                            )}&#10;                            onMouseEnter={() =&gt; setActiveCategory(category)}&#10;                        &gt;&#10;                            {category.name}&#10;                        &lt;/NavigationMenuTrigger&gt;&#10;                        &lt;NavigationMenuContent className=&quot;w-[800px] lg:w-[950px]&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-12 gap-4 p-4&quot;&gt;&#10;                                &lt;div className=&quot;col-span-5 overflow-y-auto max-h-[400px] pr-4 border-r&quot;&gt;&#10;                                    &lt;h3 className=&quot;font-medium mb-2 text-gray-900&quot;&gt;{category.name} Categories&lt;/h3&gt;&#10;                                    {category.children &amp;&amp; category.children.length &gt; 0 ? (&#10;                                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                            {category.children.map((child: any) =&gt; (&#10;                                                &lt;CategoryMenuItem &#10;                                                    key={child.uid} &#10;                                                    category={child} &#10;                                                    activePath={pathname}&#10;                                                /&gt;&#10;                                            ))}&#10;                                        &lt;/div&gt;&#10;                                    ) : (&#10;                                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;No subcategories available&lt;/p&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;col-span-7&quot;&gt;&#10;                                    &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;                                        {/* Category Banner */}&#10;                                        &lt;div className=&quot;mb-4 relative h-[200px] overflow-hidden rounded-lg&quot;&gt;&#10;                                            {category.image ? (&#10;                                                &lt;Image&#10;                                                    src={category.image}&#10;                                                    alt={category.name}&#10;                                                    fill&#10;                                                    className=&quot;object-cover&quot;&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;div className=&quot;w-full h-full bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center&quot;&gt;&#10;                                                    &lt;span className=&quot;text-gray-500&quot;&gt;{category.name}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &#10;                                        {/* Category Description */}&#10;                                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-lg font-medium mb-2&quot;&gt;{category.name}&lt;/h3&gt;&#10;                                            {category.description ? (&#10;                                                &lt;div &#10;                                                    className=&quot;text-sm text-gray-600 prose prose-sm max-w-none&quot;&#10;                                                    dangerouslySetInnerHTML={{ __html: category.description }}&#10;                                                /&gt;&#10;                                            ) : (&#10;                                                &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                                    Explore our selection of {category.name.toLowerCase()} products.&#10;                                                &lt;/p&gt;&#10;                                            )}&#10;                                            &lt;Link &#10;                                                href={`/category/${category.url_key}`}&#10;                                                className=&quot;inline-block mt-4 text-sm font-medium text-primary hover:underline&quot;&#10;                                            &gt;&#10;                                                View All {category.name} Products&#10;                                            &lt;/Link&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/NavigationMenuContent&gt;&#10;                    &lt;/NavigationMenuItem&gt;&#10;                ))}&#10;            &lt;/NavigationMenuList&gt;&#10;        &lt;/NavigationMenu&gt;&#10;    );&#10;};&#10;&#10;// Server component&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-lg font-medium hover:opacity-80 transition-opacity&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;ClientSideMegaMenu categories={categories} /&gt;&#10;            &#10;            &lt;div className=&quot;flex flex-row items-center gap-6&quot;&gt;&#10;                &lt;MiniCart/&gt;&#10;                &lt;Input&#10;                    type=&quot;search&quot;&#10;                    placeholder=&quot;Search&quot;&#10;                    className=&quot;w-full max-w-sm bg-transparent placeholder:text-black placeholder:opacity-100 border-gray-300&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/ProductCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/ProductCard.tsx" />
              <option name="originalContent" value="import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;&#10;export default function ProductCard({ product }: { product: ProductItem }) {&#10;    const price = product.price_range.minimum_price.final_price;&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const isDiscounted = price.value &lt; regularPrice.value;&#10;    const swatches =&#10;        product.configurable_options?.find(&#10;            (opt) =&gt; opt.attribute_code === &quot;color&quot;&#10;        )?.values ?? [];&#10;&#10;    return (&#10;        &lt;div className=&quot;group flex flex-col w-full max-w-xs sm:max-w-sm md:max-w-md mx-auto transition-all duration-300 hover:translate-y-[-5px]&quot;&gt;&#10;            {/* Product Image with overlay */}&#10;            &lt;Link&#10;                href={`/product/${product.url_key}`}&#10;                className=&quot;block relative aspect-square rounded-xl overflow-hidden bg-gray-100&quot;&#10;            &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black/5 group-hover:bg-black/0 transition-colors z-10&quot;&gt;&lt;/div&gt;&#10;                {product.small_image?.url ? (&#10;                    &lt;Image&#10;                        src={product.small_image.url}&#10;                        alt={product.small_image.label || product.name}&#10;                        fill&#10;                        sizes=&quot;(max-width: 640px) 45vw, (max-width: 768px) 40vw, (max-width: 1024px) 30vw, 25vw&quot;&#10;                        className=&quot;object-cover object-center group-hover:scale-105 transition-transform duration-500&quot;&#10;                    /&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;w-full h-full bg-gray-200 flex items-center justify-center text-gray-400&quot;&gt;&#10;                        No Image&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Sale badge */}&#10;                {isDiscounted &amp;&amp; (&#10;                    &lt;div className=&quot;absolute top-2 right-2 bg-red-500 text-white text-xs md:text-sm font-medium px-2 py-1 rounded-md z-20&quot;&gt;&#10;                        SALE&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/Link&gt;&#10;&#10;            {/* Product info */}&#10;            &lt;div className=&quot;mt-4 px-1 md:mt-5 md:px-2&quot;&gt;&#10;                &lt;Link href={`/product/${product.url_key}`} className=&quot;block&quot;&gt;&#10;                    &lt;h3 className=&quot;text-sm md:text-base font-medium text-gray-800 hover:text-gray-900 truncate&quot;&gt;&#10;                        {product.name}&#10;                    &lt;/h3&gt;&#10;                &lt;/Link&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;mt-1.5 md:mt-2 flex items-center gap-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm md:text-base font-medium&quot;&gt;&#10;                        {price.currency} {price.value.toFixed(2)}&#10;                    &lt;/span&gt;&#10;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;span className=&quot;text-xs md:text-sm text-gray-500 line-through&quot;&gt;&#10;                            {regularPrice.value.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Swatches */}&#10;                {swatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 md:mt-4 flex gap-1.5 md:gap-2&quot;&gt;&#10;                        {swatches.slice(0, 4).map((swatch, idx) =&gt; (&#10;                            &lt;div&#10;                                key={idx}&#10;                                title={swatch.label}&#10;                                className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full border border-gray-300 overflow-hidden&quot;&#10;                                style={{&#10;                                    backgroundColor: swatch.swatch_data?.value || &quot;transparent&quot;,&#10;                                }}&#10;                            &gt;&#10;                                {swatch.swatch_data?.thumbnail &amp;&amp; (&#10;                                    &lt;Image&#10;                                        src={swatch.swatch_data.thumbnail}&#10;                                        alt={swatch.label}&#10;                                        width={24}&#10;                                        height={24}&#10;                                        className=&quot;object-cover&quot;&#10;                                    /&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {swatches.length &gt; 4 &amp;&amp; (&#10;                            &lt;div className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full bg-gray-100 flex items-center justify-center text-[10px] md:text-xs text-gray-500&quot;&gt;&#10;                                +{swatches.length - 4}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { type ProductItem } from &quot;@/types/product&quot;;&#10;&#10;export default function ProductCard({ product }: { product: ProductItem }) {&#10;    const price = product.price_range.minimum_price.final_price;&#10;    const regularPrice = product.price_range.minimum_price.regular_price;&#10;    const isDiscounted = price.value &lt; regularPrice.value;&#10;    const swatches =&#10;        product.configurable_options?.find(&#10;            (opt) =&gt; opt.attribute_code === &quot;color&quot;&#10;        )?.values ?? [];&#10;&#10;    return (&#10;        &lt;div className=&quot;group flex flex-col w-full max-w-xs sm:max-w-sm md:max-w-md mx-auto transition-all duration-300 hover:translate-y-[-5px]&quot;&gt;&#10;            {/* Product Image with overlay */}&#10;            &lt;Link&#10;                href={`/product/${product.url_key}`}&#10;                className=&quot;block relative aspect-square rounded-xl overflow-hidden bg-gray-100&quot;&#10;            &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black/5 group-hover:bg-black/0 transition-colors z-10&quot;&gt;&lt;/div&gt;&#10;                {product.small_image?.url ? (&#10;                    &lt;Image&#10;                        src={product.small_image.url}&#10;                        alt={product.small_image.label || product.name}&#10;                        fill&#10;                        sizes=&quot;(max-width: 640px) 45vw, (max-width: 768px) 40vw, (max-width: 1024px) 30vw, 25vw&quot;&#10;                        className=&quot;object-cover object-center group-hover:scale-105 transition-transform duration-500&quot;&#10;                    /&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;w-full h-full bg-gray-200 flex items-center justify-center text-gray-400&quot;&gt;&#10;                        No Image&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Sale badge */}&#10;                {isDiscounted &amp;&amp; (&#10;                    &lt;div className=&quot;absolute top-2 right-2 bg-red-500 text-white text-xs md:text-sm font-medium px-2 py-1 rounded-md z-20&quot;&gt;&#10;                        SALE&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/Link&gt;&#10;&#10;            {/* Product info */}&#10;            &lt;div className=&quot;mt-4 px-1 md:mt-5 md:px-2&quot;&gt;&#10;                &lt;Link&#10;                    href={`/product/${product.url_key}`}&#10;                    className=&quot;block group-hover:text-primary transition-colors&quot;&#10;                &gt;&#10;                    &lt;h3 className=&quot;text-sm md:text-base font-medium text-gray-800 leading-tight min-h-[2.5em]&quot;&gt;&#10;                        {product.name}&#10;                    &lt;/h3&gt;&#10;                &lt;/Link&gt;&#10;&#10;                {/* Price */}&#10;                &lt;div className=&quot;mt-2 md:mt-3 flex items-center gap-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm md:text-base font-medium&quot;&gt;&#10;                        {price.currency} {price.value.toFixed(2)}&#10;                    &lt;/span&gt;&#10;&#10;                    {isDiscounted &amp;&amp; (&#10;                        &lt;span className=&quot;text-xs md:text-sm text-gray-500 line-through&quot;&gt;&#10;                            {regularPrice.value.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Swatches */}&#10;                {swatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 md:mt-4 flex gap-1.5 md:gap-2&quot;&gt;&#10;                        {swatches.slice(0, 4).map((swatch, idx) =&gt; (&#10;                            &lt;div&#10;                                key={idx}&#10;                                title={swatch.label}&#10;                                className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full border border-gray-300 overflow-hidden&quot;&#10;                                style={{&#10;                                    backgroundColor: swatch.swatch_data?.value || &quot;transparent&quot;,&#10;                                }}&#10;                            &gt;&#10;                                {swatch.swatch_data?.thumbnail &amp;&amp; (&#10;                                    &lt;Image&#10;                                        src={swatch.swatch_data.thumbnail}&#10;                                        alt={swatch.label}&#10;                                        width={24}&#10;                                        height={24}&#10;                                        className=&quot;object-cover&quot;&#10;                                    /&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {swatches.length &gt; 4 &amp;&amp; (&#10;                            &lt;div className=&quot;w-5 h-5 md:w-6 md:h-6 rounded-full bg-gray-100 flex items-center justify-center text-[10px] md:text-xs text-gray-500&quot;&gt;&#10;                                +{swatches.length - 4}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/SkeletonProduct.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/SkeletonProduct.tsx" />
              <option name="originalContent" value="import { Skeleton } from &quot;@/components/ui/skeleton&quot;&#10;&#10;export default function SkeletonProduct() {&#10;    return (&#10;        &lt;div className=&quot;animate-pulse flex flex-col&quot;&gt;&#10;            {/* Image placeholder */}&#10;            &lt;Skeleton className=&quot;w-[240px] h-[300px] rounded-lg&quot; /&gt;&#10;&#10;            {/* Product name */}&#10;            &lt;Skeleton className=&quot;mt-2 h-4 w-3/4 rounded&quot; /&gt;&#10;&#10;            {/* Price placeholder */}&#10;            &lt;Skeleton className=&quot;mt-1 h-4 w-1/2 rounded&quot; /&gt;&#10;&#10;            {/* Swatches row */}&#10;            &lt;div className=&quot;mt-3 flex space-x-2&quot;&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-6 h-6 rounded-full&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* CTA button */}&#10;            &lt;Skeleton className=&quot;mt-4 h-8 w-full rounded&quot; /&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import { Skeleton } from &quot;@/components/ui/skeleton&quot;&#10;&#10;export default function SkeletonProduct() {&#10;    return (&#10;        &lt;div className=&quot;animate-pulse flex flex-col w-full max-w-xs mx-auto&quot;&gt;&#10;            {/* Image placeholder */}&#10;            &lt;Skeleton className=&quot;aspect-square w-full rounded-xl&quot; /&gt;&#10;&#10;            {/* Product name */}&#10;            &lt;Skeleton className=&quot;mt-4 h-5 w-3/4 rounded&quot; /&gt;&#10;&#10;            {/* Price placeholder */}&#10;            &lt;Skeleton className=&quot;mt-2 h-4 w-1/3 rounded&quot; /&gt;&#10;&#10;            {/* Swatches row */}&#10;            &lt;div className=&quot;mt-3 flex gap-1.5&quot;&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;w-5 h-5 rounded-full&quot; /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/product/SkeletonProductGrid.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/product/SkeletonProductGrid.tsx" />
              <option name="originalContent" value="import SkeletonProduct from './SkeletonProduct'&#10;&#10;export default function SkeletonProductGrid() {&#10;    return (&#10;        &lt;div className=&quot;&#10;                grid&#10;                grid-cols-1&#10;                sm:grid-cols-2&#10;                md:grid-cols-2&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-6&#10;                gap-y-10&#10;        &quot;&gt;&#10;            {Array.from({length: 25}).map((_, index) =&gt; (&#10;                &lt;SkeletonProduct key={index}/&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import SkeletonProduct from './SkeletonProduct'&#10;&#10;export default function SkeletonProductGrid() {&#10;    return (&#10;        &lt;div className=&quot;&#10;                grid&#10;                grid-cols-2&#10;                sm:grid-cols-2&#10;                md:grid-cols-3&#10;                lg:grid-cols-3&#10;                xl:grid-cols-4&#10;                gap-x-4&#10;                sm:gap-x-6&#10;                md:gap-x-8&#10;                gap-y-10&#10;                sm:gap-y-12&#10;                md:gap-y-16&#10;        &quot;&gt;&#10;            {Array.from({length: 8}).map((_, index) =&gt; (&#10;                &lt;SkeletonProduct key={index}/&gt;&#10;            ))}&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/graphql/queries/categories/get_all_categories.graphql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/graphql/queries/categories/get_all_categories.graphql" />
              <option name="originalContent" value="query GetAllCategories {&#10;    categories {&#10;        items {&#10;            children {&#10;                ...CategoryFields&#10;                children {&#10;                    ...CategoryFields&#10;                    children {&#10;                        ...CategoryFields&#10;                        children {&#10;                            ...CategoryFields&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fragment CategoryFields on CategoryTree {&#10;    uid&#10;    name&#10;    url_key&#10;    level&#10;    path&#10;}" />
              <option name="updatedContent" value="query GetAllCategories {&#10;    categories {&#10;        items {&#10;            children {&#10;                ...CategoryFields&#10;                children {&#10;                    ...CategoryFields&#10;                    children {&#10;                        ...CategoryFields&#10;                        children {&#10;                            ...CategoryFields&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fragment CategoryFields on CategoryTree {&#10;    uid&#10;    name&#10;    url_key&#10;    level&#10;    path&#10;    description&#10;    image&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/services/categories.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/services/categories.ts" />
              <option name="originalContent" value="import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;&#10;import { type CategoryItem } from &quot;@/types/category&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: CategoryItem[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;// Helper function to transform GraphQL category data to our CategoryItem format&#10;const mapCategoryData = (category: CategoryItem): CategoryItem =&gt; {&#10;    return {&#10;        name: category.name,&#10;        uid: category.uid,&#10;        url_key: category.url_key,&#10;        path: category.path || '',&#10;        level: category.level || 0,&#10;        children: category.children ? category.children.map(mapCategoryData) : []&#10;    };&#10;};&#10;&#10;const getAllCategories = async (): Promise&lt;CategoryItem[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({ query: queryString }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        const items = data?.categories?.items ?? [];&#10;        return items.flatMap((item) =&gt;&#10;            (item.children ?? []).map(mapCategoryData)&#10;        );&#10;    }&#10;    catch (error) {&#10;        console.error(&quot;Error fetching categories:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export { getAllCategories };" />
              <option name="updatedContent" value="import GET_CATEGORIES_QUERY from &quot;@/graphql/queries/categories/get_all_categories.graphql&quot;;&#10;import { GraphQLResponse } from &quot;@/types/apollo&quot;&#10;import { type CategoryItem } from &quot;@/types/category&quot;;&#10;import {print} from &quot;graphql&quot;;&#10;&#10;type CategoriesResponse = {&#10;    categories?: {&#10;        items?: Array&lt;{&#10;            children?: CategoryItem[];&#10;        }&gt;;&#10;    };&#10;};&#10;&#10;// Helper function to transform GraphQL category data to our CategoryItem format&#10;const mapCategoryData = (category: CategoryItem): CategoryItem =&gt; {&#10;    return {&#10;        name: category.name,&#10;        uid: category.uid,&#10;        url_key: category.url_key,&#10;        path: category.path || '',&#10;        level: category.level || 0,&#10;        description: category.description || '',&#10;        image: category.image || '',&#10;        children: category.children ? category.children.map(mapCategoryData) : []&#10;    };&#10;};&#10;&#10;const getAllCategories = async (): Promise&lt;CategoryItem[]&gt; =&gt; {&#10;    const queryString = print(GET_CATEGORIES_QUERY);&#10;&#10;    try {&#10;        const res = await fetch(process.env.MAGENTO_GRAPHQL_ENDPOINT as string, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            body: JSON.stringify({ query: queryString }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            console.error(&quot;Error fetching categories:&quot;, res.statusText);&#10;            return [];&#10;        }&#10;&#10;        const { data, errors }: GraphQLResponse&lt;CategoriesResponse&gt; = await res.json();&#10;&#10;        if (errors) {&#10;            console.error(&quot;GraphQL errors:&quot;, errors);&#10;            return [];&#10;        }&#10;&#10;        const items = data?.categories?.items ?? [];&#10;        return items.flatMap((item) =&gt;&#10;            (item.children ?? []).map(mapCategoryData)&#10;        );&#10;    }&#10;    catch (error) {&#10;        console.error(&quot;Error fetching categories:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export { getAllCategories };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/category.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/category.ts" />
              <option name="originalContent" value="export interface CategoryItem  {&#10;    uid: string;&#10;    name: string;&#10;    url_key: string;&#10;    level: number;&#10;    path: string;&#10;    children?: CategoryItem[];&#10;};" />
              <option name="updatedContent" value="export interface CategoryItem  {&#10;    uid: string;&#10;    name: string;&#10;    url_key: string;&#10;    level: number;&#10;    path: string;&#10;    description?: string;&#10;    image?: string;&#10;    children?: CategoryItem[];&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>