<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/category/[slug].tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/category/[slug].tsx" />
              <option name="originalContent" value="import { GetStaticPaths, GetStaticProps } from 'next';&#10;import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;&#10;interface CategoryProps {&#10;  category: {&#10;    name: string;&#10;    id: string;&#10;    slug: string;&#10;  } | null;&#10;}&#10;&#10;const CategoryPage: React.FC&lt;CategoryProps&gt; = ({ category }) =&gt; {&#10;  if (!category) return &lt;div&gt;Category not found&lt;/div&gt;;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const getStaticPaths: GetStaticPaths = async () =&gt; {&#10;  const categories = await getAllCategories();&#10;  const paths = categories.map((cat: { slug: string }) =&gt; ({&#10;    params: { slug: cat.slug },&#10;  }));&#10;  return { paths, fallback: false };&#10;};&#10;&#10;export const getStaticProps: GetStaticProps = async ({ params }) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params?.slug) || null;&#10;  return {&#10;    props: { category },&#10;  };&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import { getAllCategories } from '@/services/categories';&#10;import React from 'react';&#10;import { notFound } from 'next/navigation';&#10;&#10;interface CategoryProps {&#10;  params: { slug: string };&#10;}&#10;&#10;export async function generateStaticParams() {&#10;  const categories = await getAllCategories();&#10;  return categories.map((cat: { slug: string }) =&gt; ({ slug: cat.slug }));&#10;}&#10;&#10;const CategoryPage = async ({ params }: CategoryProps) =&gt; {&#10;  const categories = await getAllCategories();&#10;  const category = categories.find((cat: { slug: string }) =&gt; cat.slug === params.slug) || null;&#10;  if (!category) return notFound();&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;{category.name}&lt;/h1&gt;&#10;      &lt;p&gt;Category ID: {category.id}&lt;/p&gt;&#10;      &lt;p&gt;Slug: {category.slug}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navbar.tsx" />
              <option name="originalContent" value="'use cache'&#10;&#10;import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import {getAllCategories} from &quot;@/services/categories&quot;;&#10;import {integer} from &quot;vscode-languageserver-types&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.uid}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&#10;                                                asChild&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;search&lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use cache'&#10;&#10;import Link from &quot;next/link&quot;;&#10;import {&#10;    NavigationMenu,&#10;    NavigationMenuItem,&#10;    NavigationMenuLink,&#10;    NavigationMenuList&#10;} from &quot;@/components/ui/navigation-menu&quot;;&#10;import {getAllCategories} from &quot;@/services/categories&quot;;&#10;&#10;export default async function Navbar() {&#10;    const categories = await getAllCategories();&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div&gt;&#10;                &lt;Link href=&quot;/&quot;&gt;Home&lt;/Link&gt;&#10;            &lt;/div&gt;&#10;            &lt;NavigationMenu&gt;&#10;                &lt;NavigationMenuList&gt;&#10;                    {categories.map((cat) =&gt; (&#10;                        &lt;NavigationMenuItem key={cat.uid}&gt;&#10;                            &lt;NavigationMenuLink className=&quot;text-sm font-medium text-gray-700 hover:text-gray-900&quot;&#10;                                                asChild&gt;&#10;                                &lt;Link href={`/category/${cat.url_key}`}&gt;{cat.name}&lt;/Link&gt;&#10;                            &lt;/NavigationMenuLink&gt;&#10;                        &lt;/NavigationMenuItem&gt;&#10;                    ))}&#10;                &lt;/NavigationMenuList&gt;&#10;            &lt;/NavigationMenu&gt;&#10;            &lt;div&gt;search&lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.tsx" />
              <option name="originalContent" value="import type {Metadata} from &quot;next&quot;;&#10;import {Geist, Geist_Mono} from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;import Footer from &quot;./components/Footer&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Create Next App&quot;,&#10;    description: &quot;Generated by create next app&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                             children,&#10;                                         }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    return (&#10;        &lt;html lang=&quot;en&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased min-h-dvh`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-3&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[98%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl shadow-lg&#10;            bg-blue-400/10&#10;            backdrop-blur-sm&#10;            flex&#10;            justify-between&#10;            items-center&#10;            px-6&#10;            z-50&#10;          &quot;&#10;        &gt;&#10;            &lt;Navbar/&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;relative min-h-[80dvh] pt-20 z-10&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;Footer/&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import type {Metadata} from &quot;next&quot;;&#10;import {Geist, Geist_Mono} from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Navbar from &quot;./components/Navbar&quot;;&#10;import Footer from &quot;./components/Footer&quot;;&#10;&#10;const geistSans = Geist({&#10;    variable: &quot;--font-geist-sans&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;    variable: &quot;--font-geist-mono&quot;,&#10;    subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata: Metadata = {&#10;    title: &quot;Create Next App&quot;,&#10;    description: &quot;Generated by create next app&quot;,&#10;};&#10;&#10;export default async function RootLayout({&#10;                                             children,&#10;                                         }: Readonly&lt;{&#10;    children: React.ReactNode;&#10;}&gt;) {&#10;    return (&#10;        &lt;html lang=&quot;en&quot;&gt;&#10;        &lt;body&#10;            className={`${geistSans.className} ${geistMono.className} antialiased min-h-dvh`}&#10;        &gt;&#10;        &lt;div&#10;            className=&quot;&#10;            fixed&#10;            top-3&#10;            left-1/2&#10;            -translate-x-1/2&#10;            w-[98%]&#10;            min-h-[3.75rem]&#10;            rounded-2xl shadow-lg&#10;            bg-blue-400/10&#10;            backdrop-blur-sm&#10;            flex&#10;            justify-between&#10;            items-center&#10;            px-6&#10;            z-50&#10;          &quot;&#10;        &gt;&#10;            &lt;Navbar/&gt;&#10;        &lt;/div&gt;&#10;        &lt;main className=&quot;relative min-h-[80dvh] pt-20 z-10&quot;&gt;&#10;            {children}&#10;        &lt;/main&gt;&#10;        &lt;Footer/&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/graphql.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/graphql.d.ts" />
              <option name="updatedContent" value="declare module '*.graphql' {&#10;  import { DocumentNode } from 'graphql';&#10;  const Schema: DocumentNode;&#10;  export default Schema;&#10;}&#10;&#10;declare module '*.gql' {&#10;  import { DocumentNode } from 'graphql';&#10;  const Schema: DocumentNode;&#10;  export default Schema;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>